apply plugin: 'com.android.application'

def configs = rootProject.ext.android //android配置拿取config

static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))
}

def apkFileName(variant, versionName) {
    return "${rootProject.name}-${variant.flavorName}-${variant.buildType.name}-v${versionName}-${releaseTime()}.apk"
}

android {
    compileSdkVersion configs.compileSdkVersion
    buildToolsVersion configs.buildToolsVersion

    /*DataBinding 视图绑定开启*/
    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "com.android.lib"

        minSdkVersion configs.minSdkVersion
        targetSdkVersion configs.targetSdkVersion
        versionCode configs.versionCode
        versionName configs.versionName

        /**添加多 dex分包支持 (解决引入jar包的冲突)*/
        multiDexEnabled true

        ndk {
            //设置支持的SO库架构
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    signingConfigs {
        debug {
            storeFile file("../keystore/debug.keystore")
            storePassword "android"
            keyAlias "AndroidDebugKey"
            keyPassword "android"
        }
        release {
            storeFile file("../keystore/library.keystore")
            storePassword "123456"
            keyAlias "library"
            keyPassword "123456"
        }
    }

    buildTypes {
        // 开发环境
        debug {
            minifyEnabled false
            applicationIdSuffix = ".debug"
            matchingFallbacks = ['debug']
            // API基地址
            buildConfigField("String", "BASE_URL", "\"http://${config.APP_BASE_URL}/data/sk/\"")
        }

        release {
            minifyEnabled true//开启混淆
            zipAlignEnabled true  //压缩优化
            shrinkResources true //移出无用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
            matchingFallbacks = ['release']

            // API基地址
            buildConfigField("String", "BASE_URL", "\"http://${config.APP_BASE_URL}/data/sk/\"")
        }
    }

    flavorDimensions "env"
    productFlavors {
        // 开发
        develop {}
        // 官网
        //offical {}
    }

    // 渠道号
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [APP_CHANNEL_VALUE: name]
    }
    compileOptions {
        sourceCompatibility = configs.sourceCompatibility
        targetCompatibility = configs.targetCompatibility
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(':baselib')


    testImplementation tests.junit
    androidTestImplementation tests.test_junit
    testImplementation tests.mockito_core
    androidTestImplementation tests.mockito_android
    testImplementation tests.robolectric
}
